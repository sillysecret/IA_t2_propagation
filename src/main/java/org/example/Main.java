package org.example;

import org.example.entity.TicTacToeAI;
import org.example.operacao.Algoritimo;

import java.util.Arrays;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Algoritimo.setTaxaDeCrossover(0.9);
        Algoritimo.setTaxaDeMutacao(0.5);
        Algoritimo.setNumeroMaximoGeracoes(1);
        Algoritimo.setTamanhoPopulacao(50);
        //dificuldade = 5(media), dificuldade = 3(fácil), dificuldade = 9(difícil)
        Algoritimo.setDificuldade(1);
        Algoritimo.setElitismo(true);

        double[] melhoresPesos = Algoritimo.AG();

        System.out.println("Algoritmo genético executado com sucesso!");

        System.out.println("pessos do melhor: " + Arrays.toString(melhoresPesos));

        System.out.println("Jogar contra o minimax (1) ou contra a rede neural (2) ou passar pessos a serem usados (3)?");
        Scanner scanner = new Scanner(System.in);
        int escolha = scanner.nextInt();

        if (escolha == 1) {
            TicTacToeAI.playGameAgainstMinMax();
        } else if(escolha == 2){
            TicTacToeAI.playGameAgainstMLP(melhoresPesos);
        } else if (escolha == 3) {
            double[] pesos = {8.262041466815317E45, 1.0588132726111447E56, -1.3601407899034262E39, -1.8524616357782212E48, -4.148416368487627E57, -9.978686882459559E39, 7.881661560648936E53, -8.34650283338651E55, 3.926273182935998E55, -1.915402404294601E46, -5.648671432602575E58, 6.914062942799136E62, 7.24983994009697E59, -2.962033109902215E54, 1.396545343194636E38, -1.947994027396349E54, 2.6523439386409267E36, -1.2715340701167428E44, 1.1923791650034148E46, 1.0039308726944723E60, -1.2369737037880405E49, -3.707717036259393E53, 1.2457353957652098E57, -5.044680714779379E44, -2.7368316701846584E49, 2.8624246882072755E47, -1.7440607968566238E54, 4.4615510131311686E51, 1.7323717360136114E46, 6.917064438880681E48, 4.728655626960631E53, -7.386113897338419E52, 4.1565937133867155E50, -1.6105833687450053E44, -1.2321034955931777E54, 1.2589956509213511E42, -1.0546970993668692E47, -2.0933477704579208E49, -7.604242215197092E50, 2.6688128896258974E59, -4.1515181326338016E48, -9.611727420073464E47, 2.3165609647472128E49, 4.085410523206003E54, -5.831440122649446E61, 9.631596346528569E48, -4.1372149973642266E49, 7.027783389929617E47, -2.9186340005316093E49, 3.193783997958807E50, 9.850418105994161E35, -6.316671402541366E36, 1.86652043444335E39, -1.3665567243944187E48, 4.3503015971739227E39, -1.2625461467011665E53, 4.682070500277074E50, 7.032649682729449E49, -2.1794569978591427E48, 8.707117188414782E61, 1.4618527532081528E40, -7.533310754396658E45, 8.379975513917776E44, -4.632451746058718E47, -2.814353039846904E64, 4.7444029873720384E47, 7.43842944867366E52, -2.028253130921936E51, 6.982284393403995E48, 2.714476679820205E50, 4.355694448197049E40, -3.9467900829665585E46, 9.217970015135678E57, -1.6743388067801066E38, -3.2740208459350596E42, -7.589245006355788E56, -4.044204706663941E50, 2.745767442609359E42, 7.073535638208404E51, -5.463688126149778E53, 2.1061841228145708E41, -2.6614432992781343E52, -1.239645593265952E44, 1.2423909598567845E61, -4.16639132365657E51, -1.5565048993419186E56, -2.7814164414029765E49, 9.506807066228234E56, 1.922470292218953E60, -2.6955065731106566E45, 7.985051351315745E64, -2.1843305626003727E45, 3.0753068190630476E58, -1.0385069008968631E39, -2.160064924948914E43, 1.484031916116549E46, 2.650515069618678E56, -7.474284496333117E49, -1.0934697293411009E44, -1.2660578068148512E39, -2.6981785971807497E36, -3.0125691766031587E50, -7.582558310328605E47, 1.6587787555381783E58, 7.135093017665189E50, 2.1853897522739396E54, -3.6811505106073807E48, 1.6664189461728985E49, 1.0218711338773522E38, 1.2983057955415052E54, -2.464611765863593E50, 4.4285015728549225E52, 1.4056259249151326E45, 3.966592638327208E53, 1.241421038310568E48, 5.397531364480378E47, 3.127005340764308E40, -9.325817418453963E56, -1.043527863202623E39, 3.4744542464985075E51, -3.119535677789281E48, 4.605019528397776E43, -3.173109361790581E41, -3.0542113901229036E41, -2.2121476941831605E48, -2.8784595439327098E50, -1.5958168999072E44, -2.250522165806971E52, 1.5859625296779437E47, -5.567267698090045E47, -7.817191309893242E53, 1.301454283378548E53, -1.8775496593135324E47, 3.928123054718981E41, 1.9792010626314848E54, -1.1704543516468023E60, 2.4488132140464077E40, -1.182902745098142E53, -5.479448219542369E38, 2.7985269163803323E42, 8.491233735659282E37, 4.194708139004948E47, -3.784568956841595E51, -1.2297891061406532E55, -1.1196423851376053E62, 6.788597000910418E58, -1.4533052238701507E53, -1.8868762845370116E47, 8.544967883790423E45, -5.891609016932872E46, -1.1396870660384423E44, 3.8258332625171825E59, -3.111915845299046E53, -1.6175888990640477E59, 1.1210448868647572E36, 6.837513088692647E53, -8.759724341200183E45, 2.318275924545745E49, 2.3997669381257446E58, -3.208131897218228E57, -1.2807195668337153E51, 3.0225489922480973E57, -9.606800922074938E53, -2.2431734747829138E44, -1.7948957548654296E48, 4.972789731035017E39, -2.271007401049248E48, -2.774890116621497E49, 1.501912730345664E60, 6.20711432248721E45, -5.5233139585780356E57, 3.0685759847536956E40, -1.254065836997585E55, -2.0090191935617456E38, -7.037506930082488E56, 1.2376058202475569E53, -1.3040410585566944E46, 1.4117754861542218E47, -1.368795963397729E52, 2.6513619047579747E46};
            TicTacToeAI.playGameAgainstMLP(pesos);
        }

    }
}
